name: "Terraform: Execution"
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      PAT:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: "us-west-2"

jobs:
  terragrunt:
    environment: ${{ inputs.ENVIRONMENT }}
    name: "Terragrunt"
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: enzyme-health/terraform-deployments
          token: ${{ secrets.PAT }}
          path: terraform
          ref: DEVOPS-288

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.1
        with:
          terragrunt_version: 0.38.7

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt Format
        id: fmt
        run: |
          ls terraform
          cd "terraform/deployments/aws_accounts/${{ inputs.ENVIRONMENT }}"
          terragrunt run-all hclfmt

      - name: Terragrunt Init
        id: init
        run: |
          cd "terraform/deployments/aws_accounts/${{ inputs.ENVIRONMENT }}"
          terragrunt run-all  init -input=false

      - name: Terragrunt Validate
        id: validate
        run: |
           cd "terraform/deployments/aws_accounts/${{ inputs.ENVIRONMENT }}"
           terragrunt run-all validate -no-color

      - name: Terragrunt Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          cd "terraform/deployments/aws_accounts/${{ inputs.ENVIRONMENT }}"
          terragrunt run-all plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terragrunt\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n

            ${process.env.PLAN}

            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terragrunt Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terragrunt run-all Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd "terraform/deployments/aws_accounts/${{ inputs.ENVIRONMENT }}"
          terragrunt run-all apply --terragrunt-non-interactive
